-- Create an enum for team status in the championship
CREATE TYPE team_status AS ENUM ('active', 'inactive');

-- Create the championship_seasons table
CREATE TABLE championship_seasons (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    is_current BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create the championship_teams table
CREATE TABLE championship_teams (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    season_id BIGINT REFERENCES championship_seasons(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    status team_status DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(season_id, name)
);

-- Create the championship_standings table
CREATE TABLE championship_standings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    season_id BIGINT REFERENCES championship_seasons(id) ON DELETE CASCADE,
    team_id BIGINT REFERENCES championship_teams(id) ON DELETE CASCADE,
    position INTEGER NOT NULL,
    played INTEGER DEFAULT 0,
    won INTEGER DEFAULT 0,
    drawn INTEGER DEFAULT 0,
    lost INTEGER DEFAULT 0,
    points_for INTEGER DEFAULT 0,
    try_bonus_points INTEGER DEFAULT 0,
    losing_bonus_points INTEGER DEFAULT 0,
    total_points INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(season_id, team_id)
);

-- Create function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updating timestamps
CREATE TRIGGER update_championship_seasons_updated_at
    BEFORE UPDATE ON championship_seasons
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_championship_teams_updated_at
    BEFORE UPDATE ON championship_teams
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_championship_standings_updated_at
    BEFORE UPDATE ON championship_standings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create view for current standings
CREATE OR REPLACE VIEW current_championship_standings AS
SELECT 
    cs.position,
    ct.name as team_name,
    cs.played,
    cs.won,
    cs.drawn,
    cs.lost,
    cs.points_for,
    cs.try_bonus_points,
    cs.losing_bonus_points,
    cs.total_points
FROM championship_standings cs
JOIN championship_teams ct ON cs.team_id = ct.id
JOIN championship_seasons chs ON cs.season_id = chs.id
WHERE chs.is_current = true
ORDER BY cs.position ASC;

-- Set up Row Level Security (RLS)
ALTER TABLE championship_seasons ENABLE ROW LEVEL SECURITY;
ALTER TABLE championship_teams ENABLE ROW LEVEL SECURITY;
ALTER TABLE championship_standings ENABLE ROW LEVEL SECURITY;

-- Create policies for admin access
CREATE POLICY "Allow full access for administrators" ON championship_seasons
    FOR ALL
    TO authenticated
    USING (EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role = 'admin'
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role = 'admin'
    ));

CREATE POLICY "Allow full access for administrators" ON championship_teams
    FOR ALL
    TO authenticated
    USING (EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role = 'admin'
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role = 'admin'
    ));

CREATE POLICY "Allow full access for administrators" ON championship_standings
    FOR ALL
    TO authenticated
    USING (EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role = 'admin'
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM profiles
        WHERE profiles.id = auth.uid()
        AND profiles.role = 'admin'
    ));

-- Create policies for public read access
CREATE POLICY "Allow public read access" ON championship_seasons
    FOR SELECT
    TO anon
    USING (true);

CREATE POLICY "Allow public read access" ON championship_teams
    FOR SELECT
    TO anon
    USING (true);

CREATE POLICY "Allow public read access" ON championship_standings
    FOR SELECT
    TO anon
    USING (true);

-- Insert sample data
INSERT INTO championship_seasons (name, start_date, end_date, is_current)
VALUES ('2023/24', '2023-09-01', '2024-05-31', true);

-- Get the season id
WITH season AS (
    SELECT id FROM championship_seasons WHERE name = '2023/24'
),
-- Insert teams
inserted_teams AS (
    INSERT INTO championship_teams (season_id, name)
    VALUES 
        ((SELECT id FROM season), 'Bath Rugby'),
        ((SELECT id FROM season), 'Bristol Bears'),
        ((SELECT id FROM season), 'Gloucester Rugby')
    RETURNING id, name
)
-- Insert standings
INSERT INTO championship_standings 
    (season_id, team_id, position, played, won, drawn, lost, points_for, try_bonus_points, losing_bonus_points, total_points)
VALUES
    ((SELECT id FROM season), (SELECT id FROM inserted_teams WHERE name = 'Bath Rugby'), 1, 11, 9, 0, 2, 165, 9, 1, 46),
    ((SELECT id FROM season), (SELECT id FROM inserted_teams WHERE name = 'Bristol Bears'), 2, 11, 7, 0, 4, 66, 10, 2, 40),
    ((SELECT id FROM season), (SELECT id FROM inserted_teams WHERE name = 'Gloucester Rugby'), 3, 11, 6, 0, 5, 30, 8, 3, 35);

-- Create function to calculate total points
CREATE OR REPLACE FUNCTION calculate_total_points()
RETURNS TRIGGER AS $$
BEGIN
    -- Calculate total points based on:
    -- 4 points for a win
    -- 2 points for a draw
    -- 0 points for a loss
    -- Plus try bonus points and losing bonus points
    NEW.total_points = (NEW.won * 4) + (NEW.drawn * 2) + NEW.try_bonus_points + NEW.losing_bonus_points;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically calculate total points
CREATE TRIGGER update_total_points
    BEFORE INSERT OR UPDATE ON championship_standings
    FOR EACH ROW
    EXECUTE FUNCTION calculate_total_points(); 