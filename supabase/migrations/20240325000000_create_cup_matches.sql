-- Create the cup_matches table
CREATE TABLE IF NOT EXISTS cup_matches (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team1 TEXT,
    team2 TEXT,
    score1 INTEGER,
    score2 INTEGER,
    match_date TIMESTAMP WITH TIME ZONE,
    round TEXT NOT NULL CHECK (round IN ('final', 'semi', 'quarter')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add RLS policies
ALTER TABLE cup_matches ENABLE ROW LEVEL SECURITY;

-- Allow public read access
CREATE POLICY "Allow public read access on cup_matches"
    ON cup_matches
    FOR SELECT
    TO public
    USING (true);

-- Allow admin users to insert/update/delete
CREATE POLICY "Allow admin insert on cup_matches"
    ON cup_matches
    FOR INSERT
    TO authenticated
    WITH CHECK (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE profiles.id = auth.uid()
            AND profiles.role = 'admin'
        )
    );

CREATE POLICY "Allow admin update on cup_matches"
    ON cup_matches
    FOR UPDATE
    TO authenticated
    USING (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE profiles.id = auth.uid()
            AND profiles.role = 'admin'
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE profiles.id = auth.uid()
            AND profiles.role = 'admin'
        )
    );

CREATE POLICY "Allow admin delete on cup_matches"
    ON cup_matches
    FOR DELETE
    TO authenticated
    USING (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE profiles.id = auth.uid()
            AND profiles.role = 'admin'
        )
    );

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at timestamp
CREATE TRIGGER update_cup_matches_updated_at
    BEFORE UPDATE ON cup_matches
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 